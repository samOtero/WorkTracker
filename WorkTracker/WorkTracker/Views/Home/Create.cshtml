@model WorkTracker.Models.CreateViewModel
@{
    ViewBag.Title = "Create Daily Work Report";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("CreateWorkItem", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id="createForm" }))
{
    @Html.AntiForgeryToken()
    <h4>Fill out the fields below to create your Work Report for today.</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger", @id = "validationSpot" })
    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ItemDate, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.ItemDate, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Cost, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Cost, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Hours, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Hours, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.AssignedTo, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.AssignedTo, new SelectList(Model.AssignedToList, "Id", "FullName"), new { @class = "form-control" })
        </div>
    </div>
    @Html.HiddenFor(m => m.CreatedBy);
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" id="createWorkItemBtn" class="btn btn-primary" value="Create Work Item" />
        </div>
    </div>
}

<div>
    <h3>Created Work Items</h3>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Cost</th>
                <th>Hours</th>
                <th>Assigned To</th>
            </tr>
        </thead>
        <tbody id="createdTableBody">
        </tbody>
    </table>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript" src="~/Scripts/jquery-notify.min.js"></script>
<script>
    $(document).ready(function () {
        $("#ItemDate").datepicker();
        $("#ItemDate").prop('readonly', true); //Set as read only for mobile

        $("#createWorkItemBtn").click(function () {
            $("#createWorkItemBtn").val("Creating...");
            $("#createWorkItemBtn").addClass("disabled");
            var costValue = $("#Cost").val();
            var estimateValue = $("#Hours").val();
            costValue = costValue.replace(/,/g, "");
            estimateValue = estimateValue.replace(/,/g, "");
            $("#Hours").val(estimateValue);
            $("#Cost").val(costValue);
            $.ajax(
                {
                    url: "CreateWorkItem",
                    data: $("#createForm").serialize(),
                    success: function (result) {
                        $("#createWorkItemBtn").val("Create Work Item");
                        $("#createWorkItemBtn").removeClass("disabled");
                        clearValidation();
                        if (result.Result == true) {
                            //good, add to the table of added work items and remove all data
                            createNotification("Work Item has been created!", "success");
                            addCreatedItem();
                        } else {
                            //validation or error
                            createNotification("Work Item could not be created.", "error");
                            for (var i = 0; i < result.validations.length; i++) {
                                addValidationItem(result.validations[i]);
                            }
                        }
                    },
                    error: function (result) {
                        alert("Got an error response from server!");
                    }
                }
                );
        });
        function clearValidation() {
            $("#validationSpot ul").html("");
        }
        function addValidationItem(newItem) {
            $("#validationSpot ul").append('<li>' + newItem + '</li>');
        }
        function createNotification(text, type) {
            $.notify.create(text, {
                appendTo: '.body-content',
                sticky: false,
                type: type,
                style: 'box'
            });
        }
        function addCreatedItem() {
            //Get field values
            var name = $("#Name").val();
            var date = $("#ItemDate").val();
            var cost = $("#Cost").val();
            var hours = $("#Hours").val();
            var assigned = $("#AssignedTo").find(":selected").text();
            //Add new row to table
            $("#createdTableBody").append("<tr>"+
                "<td>"+name+"</td>" +
                "<td>" + date + "</td>" +
                "<td>" + cost + "</td>" +
                "<td>" + hours + "</td>" +
                "<td>" + assigned + "</td>" +
                "</tr>");
            //Clear our fields
            $("#Name").val("");
            $("#ItemDate").val("");
            $("#Cost").val("");
            $("#Hours").val("");
        }
    });
</script>
